/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */

plugins {

    id 'idea'
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'
    id 'com.gradle.build-scan' version '2.0.2'
    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'

    // code quality plugins
    id 'checkstyle' // style guide
    id 'com.github.spotbugs' version '4.4.5'    // common bugs
    id 'jacoco' // code coverage
}

spotbugs {
    excludeFilter = file("config/spotbugs-exclude.xml")
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacocoTestCoverageVerification {

    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude:  [
                    'com/samlinasoft/gcp/App.class', 'com/samlinasoft/gcp/VersionFileReader.class'
            ])
        })
    }
    violationRules {
        rule {
            limit {
                minimum = 1.0
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }

    dependsOn test
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {

    compile 'com.google.cloud:google-cloud-storage:1.96.0'
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.0.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.0.5.RELEASE'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }
}

application {
    // Define the main class for the application
    mainClassName = 'com.samlinasoft.gcp.App'
}

bootJar {
    mainClassName = 'com.samlinasoft.gcp.App'
}